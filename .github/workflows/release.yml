# Release Workflow
# Purpose: Build and publish production releases
# Trigger: Only on version tags (v*) AND when CI workflows have passed
# Scope:
#   - Verify CI status (Quick CI + E2E Tests must pass)
#   - Build for all platforms (macOS, Windows, Linux)
#   - Package native installers
#   - Create GitHub release with all artifacts
# Time: ~15 minutes (build only, no testing)

name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.25)'
        required: true
        type: string
      skip_ci_check:
        description: 'Skip CI verification (for testing only)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  check-ci-status:
    name: Verify CI Status
    runs-on: ubuntu-latest
    outputs:
      ci_passed: ${{ steps.final.outputs.ci_passed }}
    steps:
    - uses: actions/checkout@v5

    - name: Skip CI check (manual trigger only)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.skip_ci_check == 'true'
      id: check
      run: |
        echo "⚠️  Skipping CI verification (manual trigger)"
        echo "ci_passed=true" >> $GITHUB_OUTPUT

    - name: Check CI status for tagged commit
      if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.skip_ci_check != 'true')
      id: check_ci
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        COMMIT_SHA="${{ github.sha }}"
        echo "🔍 Checking CI status for commit: $COMMIT_SHA"

        # Poll GitHub Actions until Quick CI and E2E Tests complete
        MAX_ATTEMPTS=60   # ~30 minutes at 30s interval
        SLEEP_SECONDS=30
        ATTEMPT=0
        PASSED=0

        while [[ $ATTEMPT -lt $MAX_ATTEMPTS ]]; do
          ATTEMPT=$((ATTEMPT + 1))
          echo "📋 Attempt $ATTEMPT: Fetching workflow runs for commit..."

          WORKFLOWS_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?head_sha=$COMMIT_SHA")

          # Extract latest run status and conclusion for each workflow
          QUICK_STATUS=$(echo "$WORKFLOWS_RESPONSE" | jq -r '[.workflow_runs[] | select(.name == "Quick CI")] | sort_by(.created_at) | last | .status // empty')
          QUICK_CONCLUSION=$(echo "$WORKFLOWS_RESPONSE" | jq -r '[.workflow_runs[] | select(.name == "Quick CI")] | sort_by(.created_at) | last | .conclusion // empty')
          E2E_STATUS=$(echo "$WORKFLOWS_RESPONSE" | jq -r '[.workflow_runs[] | select(.name == "E2E Tests")] | sort_by(.created_at) | last | .status // empty')
          E2E_CONCLUSION=$(echo "$WORKFLOWS_RESPONSE" | jq -r '[.workflow_runs[] | select(.name == "E2E Tests")] | sort_by(.created_at) | last | .conclusion // empty')

          echo "   Quick CI: status=$QUICK_STATUS conclusion=$QUICK_CONCLUSION"
          echo "   E2E Tests: status=$E2E_STATUS conclusion=$E2E_CONCLUSION"

          # If both completed successfully, proceed
          if [[ "$QUICK_STATUS" == "completed" && "$QUICK_CONCLUSION" == "success" && \
                "$E2E_STATUS" == "completed" && "$E2E_CONCLUSION" == "success" ]]; then
            echo "✅ Both CI workflows passed, proceeding with release"
            PASSED=1
            break
          fi

          # If any completed with a non-success conclusion, fail fast
          if [[ "$QUICK_STATUS" == "completed" && "$QUICK_CONCLUSION" != "success" ]] || \
             [[ "$E2E_STATUS" == "completed" && "$E2E_CONCLUSION" != "success" ]]; then
            echo "❌ CI workflows did not pass"
            break
          fi

          # Otherwise, wait and poll again
          echo "⏳ Workflows still running or not started. Waiting $SLEEP_SECONDS seconds..."
          sleep $SLEEP_SECONDS
        done

        if [[ $PASSED -eq 1 ]]; then
          echo "ci_passed=true" >> $GITHUB_OUTPUT
        else
          echo "ci_passed=false" >> $GITHUB_OUTPUT
          echo "🛑 Release blocked - CI workflows failed or did not complete in time"
        fi

    - name: Set final output
      id: final
      run: |
        if [[ "${{ steps.check.outputs.ci_passed }}" == "true" || "${{ steps.check_ci.outputs.ci_passed }}" == "true" ]]; then
          echo "ci_passed=true" >> $GITHUB_OUTPUT
        else
          echo "ci_passed=false" >> $GITHUB_OUTPUT
        fi

  build:
    name: Build & Package
    needs: check-ci-status
    if: needs.check-ci-status.outputs.ci_passed == 'true'
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ["3.12"]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install pnpm
      uses: pnpm/action-setup@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org/'

    - name: Install dependencies
      run: |
        pnpm run install:all

    - name: Build and package app
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          # Clean up any stuck DMG mounts before starting
          for vol in /Volumes/ideal-goggles*; do
            if [ -d "$vol" ]; then
              echo "Force unmounting stuck volume: $vol"
              hdiutil detach "$vol" -force || true
            fi
          done
          # Build with sequential architecture to avoid mount conflicts
          pnpm run dist:mac || {
            echo "Build failed, cleaning up and retrying..."
            # Force cleanup of any stuck mounts
            for vol in /Volumes/ideal-goggles*; do
              [ -d "$vol" ] && hdiutil detach "$vol" -force || true
            done
            sleep 5
            pnpm run dist:mac
          }
        fi
        if [ "${{ matrix.os }}" = "windows-latest" ]; then pnpm run dist:win; fi

    - name: Upload artifacts (mac)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: dist-electron/*.dmg

    - name: Upload artifacts (windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: dist-electron/*.exe

  create-release:
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - uses: actions/checkout@v5

    - name: Download artifacts
      uses: actions/download-artifact@v5

    - name: Determine tag name
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag_name=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi

    - name: Determine prerelease status
      id: prerelease
      run: |
        TAG="${{ steps.tag.outputs.tag_name }}"
        if [[ "$TAG" == *"-beta"* ]] || [[ "$TAG" == *"-alpha"* ]] || [[ "$TAG" == *"-rc"* ]]; then
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "📦 This is a pre-release version"
        else
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "📦 This is a stable release"
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag_name }}
        files: |
          macos-dmg/*.dmg
          macos-dmg/*.dmg.blockmap
          macos-dmg/latest-mac.yml
          windows-installer/*.exe
          windows-installer/*.exe.blockmap
          windows-installer/latest.yml
        draft: false
        prerelease: ${{ steps.prerelease.outputs.prerelease == 'true' }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
