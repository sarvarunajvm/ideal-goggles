name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python-version: ["3.11"]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install pnpm
      uses: pnpm/action-setup@v4

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'

    - name: Build backend binary (PyInstaller)
      working-directory: ./backend
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pyinstaller
        pyinstaller --onefile --name ideal-goggles-backend -p src -s src/main.py

    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile

    - name: Lint + typecheck frontend
      run: |
        pnpm run lint
        pnpm run type-check
        pnpm run test:unit

    - name: Build frontend
      run: pnpm run build:frontend

    - name: Build Electron main/preload
      run: pnpm run build:electron:main

    - name: Package app (electron-builder)
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then pnpm exec electron-builder --mac; fi
        if [ "${{ matrix.os }}" = "windows-latest" ]; then pnpm exec electron-builder --win; fi
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then pnpm exec electron-builder --linux; fi

    - name: Upload artifacts (mac)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: dist-electron/*.dmg

    - name: Upload artifacts (windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: dist-electron/*.exe

    - name: Upload artifacts (linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-packages
        path: |
          dist-electron/*.AppImage
          dist-electron/*.deb

  create-release:
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          macos-dmg/*.dmg
          windows-installer/*.exe
          linux-packages/*.AppImage
          linux-packages/*.deb
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
