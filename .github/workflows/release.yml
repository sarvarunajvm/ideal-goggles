# Release Workflow
# Purpose: Build and publish production releases
# Trigger: Only on version tags (v*) AND when CI workflows have passed
# Scope:
#   - Verify CI status (Quick CI + E2E Tests must pass)
#   - Build for all platforms (macOS, Windows, Linux)
#   - Package native installers
#   - Create GitHub release with all artifacts
# Time: ~15 minutes (build only, no testing)

name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  check-ci-status:
    name: Verify CI Status
    runs-on: ubuntu-latest
    outputs:
      ci_passed: ${{ steps.check.outputs.ci_passed }}
    steps:
    - uses: actions/checkout@v4

    - name: Check CI status for tagged commit
      id: check
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the commit SHA for this tag
        COMMIT_SHA="${{ github.sha }}"
        echo "🔍 Checking CI status for commit: $COMMIT_SHA"

        # Check workflow runs for this commit
        echo "📋 Fetching workflow runs for commit..."

        # Get recent workflow runs for this commit
        WORKFLOWS_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs?head_sha=$COMMIT_SHA")

        # Check if both required workflows passed
        # Quick CI: Quality checks + unit tests + coverage + P0 E2E tests
        # E2E Tests: Full comprehensive E2E test suite
        QUICK_CI_STATUS=$(echo "$WORKFLOWS_RESPONSE" | jq -r '.workflow_runs[] | select(.name == "Quick CI") | .conclusion' | head -1)
        E2E_CI_STATUS=$(echo "$WORKFLOWS_RESPONSE" | jq -r '.workflow_runs[] | select(.name == "E2E Tests") | .conclusion' | head -1)

        echo "Quick CI status: $QUICK_CI_STATUS"
        echo "E2E Tests status: $E2E_CI_STATUS"

        # Determine if we should proceed with release
        # Both Quick CI and E2E Tests must pass for production release
        if [[ "$QUICK_CI_STATUS" == "success" ]] && [[ "$E2E_CI_STATUS" == "success" ]]; then
          echo "✅ Both CI workflows passed, proceeding with release"
          echo "   - Quick CI: Quality checks + unit tests + coverage + P0 E2E ✅"
          echo "   - E2E Tests: Full comprehensive E2E test suite ✅"
          echo "ci_passed=true" >> $GITHUB_OUTPUT
        elif [[ -z "$QUICK_CI_STATUS" ]] || [[ -z "$E2E_CI_STATUS" ]]; then
          echo "⚠️  CI status not found, may be first release or workflows changed"
          echo "🚀 Proceeding with release (manual verification recommended)"
          echo "   - Ensure both 'Quick CI' and 'E2E Tests' workflows have run successfully"
          echo "ci_passed=true" >> $GITHUB_OUTPUT
        else
          echo "❌ CI workflows failed or incomplete - blocking release for safety:"
          echo "   Quick CI: $QUICK_CI_STATUS"
          echo "   E2E Tests: $E2E_CI_STATUS"
          echo ""
          echo "🛑 Release blocked - fix failing tests before creating release"
          echo "   - Quick CI provides fast feedback with essential checks"
          echo "   - E2E Tests provides comprehensive regression testing"
          echo "ci_passed=false" >> $GITHUB_OUTPUT
        fi

  build:
    name: Build & Package
    needs: check-ci-status
    if: needs.check-ci-status.outputs.ci_passed == 'true'
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python-version: ["3.12"]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install pnpm
      uses: pnpm/action-setup@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org/'

    - name: Install dependencies
      run: |
        pnpm run install:all

    - name: Build and package app
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then pnpm run dist:mac; fi
        if [ "${{ matrix.os }}" = "windows-latest" ]; then pnpm run dist:win; fi
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then pnpm run dist:linux; fi

    - name: Upload artifacts (mac)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: dist-electron/*.dmg

    - name: Upload artifacts (windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: dist-electron/*.exe

    - name: Upload artifacts (linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-packages
        path: |
          dist-electron/*.AppImage
          dist-electron/*.deb

  create-release:
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          macos-dmg/*.dmg
          windows-installer/*.exe
          linux-packages/*.AppImage
          linux-packages/*.deb
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
