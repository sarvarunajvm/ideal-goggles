openapi: 3.0.3
info:
  title: Ideal Goggles Search API
  version: 2.0.0
  description: |
    Photo search and management API with multiple search capabilities:
    - **Text Search**: Full-text search across filenames, folders, and metadata
    - **Semantic Search**: Natural language search using CLIP embeddings
    - **Image Search**: Reverse image search using visual similarity
    - **Face Search**: Find photos containing specific enrolled people

    ## Key Features
    - Pagination support for all search endpoints
    - Configurable result limits and offsets
    - Rich metadata including thumbnails and EXIF data
    - Performance tracking with execution time metrics

    ## Authentication
    Currently no authentication required for local deployment.
    Future versions will support API key authentication.

  contact:
    name: API Support
    email: support@ideal-goggles.app
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://127.0.0.1:5555
    description: Local backend server (default)
  - url: /api
    description: Proxied through frontend (development)

tags:
  - name: System
    description: System health and monitoring
  - name: Configuration
    description: Application configuration
  - name: Search
    description: Search operations
  - name: Indexing
    description: Indexing operations
  - name: People
    description: People management for face search
  - name: Logs
    description: Logging and debugging endpoints

paths:
  /:
    get:
      summary: Root endpoint
      tags: [System]
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ideal Goggles API
                  version:
                    type: string
                    example: 1.0.8
                  ui:
                    type: string
                    nullable: true
                    description: Path to UI if available
                  docs:
                    type: string
                    nullable: true
                    description: Path to API documentation

  /health:
    get:
      summary: Health check endpoint
      tags: [System]
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: 1.0.8
                  service:
                    type: string
                    example: ideal-goggles-api
                  system:
                    type: object
                    properties:
                      cpu_percent:
                        type: number
                      memory_percent:
                        type: number
                      disk_usage_percent:
                        type: number
                  database:
                    type: object
                    properties:
                      connected:
                        type: boolean
                      size_mb:
                        type: number
                      photo_count:
                        type: integer
                  dependencies:
                    type: object
                    properties:
                      tesseract:
                        type: boolean
                      faiss:
                        type: boolean
                      onnx:
                        type: boolean

  /config:
    get:
      summary: Get current configuration
      tags: [Configuration]
      responses:
        '200':
          description: Current configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'

  /config:
    put:
      summary: Update configuration
      tags: [Configuration]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ocr_languages:
                  type: array
                  items:
                    type: string
                face_search_enabled:
                  type: boolean
                semantic_search_enabled:
                  type: boolean
                batch_size:
                  type: integer
                  minimum: 1
                  maximum: 100
                thumbnail_size:
                  type: string
                  enum: [256, 512]
                thumbnail_quality:
                  type: integer
                  minimum: 50
                  maximum: 100
      responses:
        '200':
          description: Configuration updated
        '400':
          description: Invalid configuration

  /config/roots:
    post:
      summary: Update root folders for indexing
      tags: [Configuration]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roots:
                  type: array
                  items:
                    type: string
                  description: Array of root folder paths
              required: [roots]
      responses:
        '200':
          description: Configuration updated successfully
        '400':
          description: Invalid folder paths provided

  /index/start:
    post:
      summary: Start indexing process
      tags: [Indexing]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                full:
                  type: boolean
                  default: false
                  description: Whether to perform full re-index
      responses:
        '200':
          description: Indexing started
        '409':
          description: Indexing already in progress

  /index/status:
    get:
      summary: Get indexing status
      tags: [Indexing]
      responses:
        '200':
          description: Current indexing status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexStatus'

  /index/stop:
    post:
      summary: Stop indexing process
      tags: [Indexing]
      responses:
        '200':
          description: Indexing stopped
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  stopped_at:
                    type: string
                    format: date-time
        '400':
          description: No indexing process running

  /index/stats:
    get:
      summary: Get indexing statistics
      tags: [Indexing]
      responses:
        '200':
          description: Indexing statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  database:
                    type: object
                    properties:
                      total_photos:
                        type: integer
                      indexed_photos:
                        type: integer
                      photos_with_exif:
                        type: integer
                      photos_with_ocr:
                        type: integer
                      photos_with_embeddings:
                        type: integer
                      total_faces:
                        type: integer
                      enrolled_people:
                        type: integer
                      thumbnails:
                        type: integer
                  current_indexing:
                    type: object
                    properties:
                      status:
                        type: string
                      progress:
                        type: object
                      started_at:
                        type: string
                        format: date-time
                        nullable: true
                      errors_count:
                        type: integer
                  database_info:
                    type: object
                    properties:
                      size_mb:
                        type: number
                      schema_version:
                        type: string

  /search:
    get:
      summary: Text-based search with filters
      description: |
        Performs text-based search across photo metadata including:
        - Filenames and folder paths
        - EXIF camera information (make, model)
        - Date ranges for photo timestamps

        ### Search Examples
        - `?q=sunset` - Find photos with "sunset" in filename/folder
        - `?q=Canon&from=2024-01-01` - Canon photos from 2024 onwards
        - `?folder=/vacation/2024&limit=100` - Photos in vacation folder

        ### Pagination
        Use `limit` and `offset` for paginating large result sets.
        The response includes `total_matches` for calculating pages.
      tags: [Search]
      operationId: searchPhotos
      parameters:
        - name: q
          in: query
          schema:
            type: string
            minLength: 1
            maxLength: 500
            example: "beach sunset"
          description: |
            Search query text. Searches in:
            - Photo filenames
            - Folder paths
            - Camera make/model from EXIF

        - name: from
          in: query
          schema:
            type: string
            format: date
            example: "2024-01-01"
          description: |
            Start date filter (inclusive).
            Format: YYYY-MM-DD
            Filters by photo capture timestamp (shot_dt).

        - name: to
          in: query
          schema:
            type: string
            format: date
            example: "2024-12-31"
          description: |
            End date filter (inclusive).
            Format: YYYY-MM-DD
            Filters by photo capture timestamp (shot_dt).

        - name: folder
          in: query
          schema:
            type: string
            maxLength: 1024
            example: "/Photos/2024/Summer"
          description: |
            Folder path filter (prefix match).
            Matches all photos in this folder and subfolders.

        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 200
            example: 50
          description: |
            Maximum number of results per page.
            Default: 50, Max: 200

        - name: offset
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
            example: 0
          description: |
            Results offset for pagination.
            Calculate as: page_number * limit

      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'
              examples:
                textSearch:
                  summary: Text search results
                  value:
                    query: "sunset"
                    total_matches: 42
                    items:
                      - file_id: 123
                        path: "/Photos/2024/beach_sunset.jpg"
                        folder: "/Photos/2024"
                        filename: "beach_sunset.jpg"
                        thumb_path: "/thumbnails/123.jpg"
                        shot_dt: "2024-06-15T18:30:00Z"
                        score: 0.95
                        badges: ["filename"]
                        snippet: null
                    took_ms: 125

        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /search/semantic:
    post:
      summary: AI-powered semantic search
      description: |
        Uses CLIP embeddings to find photos matching natural language descriptions.
        This endpoint converts text descriptions into visual concepts and finds
        semantically similar images.

        ### Prerequisites
        - CLIP dependencies must be installed
        - Photos must have generated embeddings (done during indexing)

        ### Example Queries
        - "a dog playing in the park"
        - "sunset over mountains"
        - "birthday party with cake"
        - "red sports car on highway"

        ### How It Works
        1. Text is converted to CLIP embedding
        2. Cosine similarity calculated against photo embeddings
        3. Results ranked by similarity score
      tags: [Search]
      operationId: semanticSearch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SemanticSearchRequest'
            examples:
              simpleSearch:
                summary: Simple semantic search
                value:
                  text: "beach sunset with palm trees"
                  top_k: 20
              detailedSearch:
                summary: Detailed description search
                value:
                  text: "a golden retriever running through green grass on a sunny day"
                  top_k: 50
      responses:
        '200':
          description: Semantic search completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'
              examples:
                semanticResults:
                  summary: Semantic search results
                  value:
                    query: "sunset beach"
                    total_matches: 15
                    items:
                      - file_id: 456
                        path: "/Photos/vacation/beach_evening.jpg"
                        folder: "/Photos/vacation"
                        filename: "beach_evening.jpg"
                        thumb_path: "/thumbnails/456.jpg"
                        shot_dt: "2024-07-20T19:15:00Z"
                        score: 0.89
                        badges: ["image"]
                        snippet: null
                    took_ms: 250

        '503':
          description: |
            Service unavailable - CLIP dependencies not installed or configured.
            Install with: pip install torch torchvision clip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /search/image:
    post:
      summary: Reverse image search
      description: |
        Find visually similar photos by uploading an image.
        Uses CLIP embeddings to calculate visual similarity.

        ### Supported Formats
        - JPEG/JPG
        - PNG
        - GIF
        - BMP
        - WebP

        ### Use Cases
        - Find duplicates or near-duplicates
        - Locate similar compositions
        - Find photos from same event/location
        - Identify edited versions of same photo

        ### Process
        1. Image is processed through CLIP model
        2. Visual embedding is generated
        3. Similarity calculated against indexed photos
        4. Results ranked by visual similarity score
      tags: [Search]
      operationId: imageSearch
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: |
                    Image file to search with.
                    Max size: 50MB
                    Supported: JPEG, PNG, GIF, BMP, WebP
                top_k:
                  type: integer
                  default: 50
                  minimum: 1
                  maximum: 200
                  description: Maximum number of similar images to return
              required: [file]
      responses:
        '200':
          description: Image search completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'
              examples:
                imageSearchResults:
                  summary: Reverse image search results
                  value:
                    query: "Image: vacation_photo.jpg"
                    total_matches: 23
                    items:
                      - file_id: 789
                        path: "/Photos/2024/similar_scene.jpg"
                        folder: "/Photos/2024"
                        filename: "similar_scene.jpg"
                        thumb_path: "/thumbnails/789.jpg"
                        shot_dt: "2024-06-10T14:20:00Z"
                        score: 0.94
                        badges: ["image"]
                        snippet: null
                    took_ms: 320

        '400':
          description: |
            Invalid image file. Check:
            - File is a valid image format
            - File is not corrupted
            - File size is under 50MB
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '503':
          description: Service unavailable - CLIP dependencies not installed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /photos/{photo_id}/original:
    get:
      summary: Get original photo file
      description: |
        Retrieve the original photo file by its database ID.
        Returns the full-resolution image file.

        ### Media Types
        Automatically detected based on file extension:
        - JPEG/JPG: image/jpeg
        - PNG: image/png
        - GIF: image/gif
        - BMP: image/bmp
        - WebP: image/webp
        - Others: application/octet-stream
      tags: [Search]
      operationId: getOriginalPhoto
      parameters:
        - name: photo_id
          in: path
          required: true
          schema:
            type: integer
          description: Database ID of the photo
          example: 123
      responses:
        '200':
          description: Original photo file
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
            application/octet-stream:
              schema:
                type: string
                format: binary

        '404':
          description: |
            Photo not found. Either:
            - Invalid photo ID
            - Photo file deleted from disk
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /search/faces:
    post:
      summary: Search by enrolled person
      description: |
        Find all photos containing a specific enrolled person.
        Requires face search to be enabled and person to be enrolled.

        ### Prerequisites
        - Face search must be enabled in config
        - Person must be enrolled via `/people` endpoint
        - Photos must have face detection completed

        ### How It Works
        1. Person's face vector retrieved from database
        2. Faces in photos compared using face recognition
        3. Results include confidence scores
        4. Only returns matches above 0.5 confidence threshold

        ### Privacy Note
        Face data is stored locally only and never transmitted externally.
      tags: [Search]
      operationId: faceSearch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaceSearchRequest'
            examples:
              searchPerson:
                summary: Search for specific person
                value:
                  person_id: 1
                  top_k: 100
      responses:
        '200':
          description: Face search completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'
              examples:
                faceSearchResults:
                  summary: Face search results
                  value:
                    query: "Person: John Doe"
                    total_matches: 34
                    items:
                      - file_id: 234
                        path: "/Photos/events/party_2024.jpg"
                        folder: "/Photos/events"
                        filename: "party_2024.jpg"
                        thumb_path: "/thumbnails/234.jpg"
                        shot_dt: "2024-03-15T20:30:00Z"
                        score: 0.92
                        badges: ["face"]
                        snippet: null
                    took_ms: 180

        '403':
          description: |
            Face search is disabled.
            Enable via `/config` endpoint: `face_search_enabled: true`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '404':
          description: Person not found or inactive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /people:
    get:
      summary: List enrolled people
      tags: [People]
      responses:
        '200':
          description: List of enrolled people
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'

    post:
      summary: Enroll new person for face search
      tags: [People]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Person's display name
                sample_file_ids:
                  type: array
                  items:
                    type: integer
                  description: Array of photo IDs containing this person
              required: [name, sample_file_ids]
      responses:
        '201':
          description: Person enrolled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid sample photos or name already exists

  /people/{id}:
    delete:
      summary: Delete enrolled person
      tags: [People]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Person deleted successfully
        '404':
          description: Person not found

  /logs:
    post:
      summary: Submit client-side logs
      tags: [Logs]
      description: Endpoint for frontend to send error logs and telemetry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                level:
                  type: string
                  enum: [DEBUG, INFO, WARN, ERROR]
                message:
                  type: string
                context:
                  type: object
                timestamp:
                  type: string
                  format: date-time
                userAgent:
                  type: string
                url:
                  type: string
                error:
                  type: object
                  properties:
                    message:
                      type: string
                    stack:
                      type: string
              required: [level, message, timestamp]
      responses:
        '204':
          description: Log received
        '400':
          description: Invalid log format

  /logs/errors:
    post:
      summary: Submit error reports
      tags: [Logs]
      description: Dedicated endpoint for error reporting from error boundaries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                stack:
                  type: string
                componentStack:
                  type: string
                componentName:
                  type: string
                timestamp:
                  type: string
                  format: date-time
                userAgent:
                  type: string
                url:
                  type: string
              required: [message, timestamp]
      responses:
        '204':
          description: Error report received
        '400':
          description: Invalid error format

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: Optional API key for future authentication

  headers:
    X-Request-ID:
      description: Unique request identifier for tracing
      schema:
        type: string
        format: uuid

  schemas:
    Configuration:
      type: object
      properties:
        roots:
          type: array
          items:
            type: string
          description: Configured root folders
        ocr_languages:
          type: array
          items:
            type: string
          description: Enabled OCR languages
        face_search_enabled:
          type: boolean
          description: Whether face search is enabled
        semantic_search_enabled:
          type: boolean
          description: Whether semantic search is enabled
        batch_size:
          type: integer
          description: Batch size for processing
        thumbnail_size:
          type: string
          description: Thumbnail dimensions
        index_version:
          type: string
          description: Current index version

    IndexStatus:
      type: object
      properties:
        status:
          type: string
          enum: [idle, indexing, error]
        progress:
          type: object
          properties:
            total_files:
              type: integer
            processed_files:
              type: integer
            current_phase:
              type: string
              enum: [discovery, metadata, ocr, embeddings, thumbnails, faces, completed]
        errors:
          type: array
          items:
            type: string
        started_at:
          type: string
          format: date-time
        estimated_completion:
          type: string
          format: date-time

    SearchResults:
      type: object
      description: |
        Standard response format for all search endpoints.
        Contains matched items with metadata and performance metrics.
      required:
        - query
        - total_matches
        - items
        - took_ms
      properties:
        query:
          type: string
          description: |
            Original search query or description.
            For image search: "Image: {filename}"
            For face search: "Person: {name}"
          example: "sunset beach"
        total_matches:
          type: integer
          description: Total count of matching photos (useful for pagination)
          minimum: 0
          example: 42
        items:
          type: array
          description: Array of search result items, ordered by relevance
          items:
            $ref: '#/components/schemas/SearchResultItem'
        took_ms:
          type: integer
          description: Search execution time in milliseconds
          minimum: 0
          example: 125

    SearchResultItem:
      type: object
      description: Individual search result with photo metadata and match information
      required:
        - file_id
        - path
        - folder
        - filename
        - score
        - badges
      properties:
        file_id:
          type: integer
          description: Unique database identifier for the photo
          example: 123
        path:
          type: string
          description: Absolute file system path to the photo
          example: "/Users/john/Photos/2024/beach_sunset.jpg"
        folder:
          type: string
          description: Parent folder path (directory containing the photo)
          example: "/Users/john/Photos/2024"
        filename:
          type: string
          description: File name with extension
          example: "beach_sunset.jpg"
        thumb_path:
          type: string
          nullable: true
          description: |
            Relative path to thumbnail image.
            Null if thumbnail not generated yet.
          example: "/thumbnails/123.jpg"
        shot_dt:
          type: string
          format: date-time
          nullable: true
          description: |
            Photo capture timestamp from EXIF data.
            ISO 8601 format. Null if no EXIF date available.
          example: "2024-06-15T18:30:00Z"
        score:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          description: |
            Relevance/similarity score:
            - Text search: relevance score based on match types
            - Semantic/Image: cosine similarity (0=different, 1=identical)
            - Face search: face recognition confidence
          example: 0.89
        badges:
          type: array
          description: |
            Match type indicators showing where/how the match was found:
            - "filename": Match in file name
            - "folder": Match in folder path
            - "exif": Match in camera metadata
            - "image": Visual/semantic match
            - "face": Face recognition match
          items:
            type: string
            enum: [filename, folder, exif, image, face]
          example: ["filename", "exif"]
        snippet:
          type: string
          nullable: true
          description: |
            Text excerpt showing context around match.
            Currently null (OCR not implemented).
            Future: Will show OCR text snippets.
          example: null

    SemanticSearchRequest:
      type: object
      description: Request body for semantic search
      required:
        - text
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 1000
          description: Natural language description of what to find
          example: "a dog playing in the park"
        top_k:
          type: integer
          default: 50
          minimum: 1
          maximum: 200
          description: Maximum number of results to return
          example: 50

    FaceSearchRequest:
      type: object
      description: Request body for face-based search
      required:
        - person_id
      properties:
        person_id:
          type: integer
          description: Database ID of the enrolled person
          example: 1
        top_k:
          type: integer
          default: 50
          minimum: 1
          maximum: 200
          description: Maximum number of results to return
          example: 100

    Person:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sample_count:
          type: integer
          description: Number of sample photos used
        created_at:
          type: string
          format: date-time
        active:
          type: boolean
          description: Whether person search is enabled

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        detail:
          type: string
          description: Detailed error information
        request_id:
          type: string
          description: Request ID for tracing
        timestamp:
          type: string
          format: date-time
      required: [error, timestamp]

security:
  - {}
  - ApiKeyAuth: []
