{
  "name": "ideal-goggles",
  "version": "1.0.24",
  "description": "Ideal Goggles desktop application",
  "author": "Ideal Goggles Team",
  "main": "frontend/electron/dist/main.js",
  "homepage": "./",
  "scripts": {
    "// === DEVELOPMENT ===": "",
    "dev": "concurrently \"pnpm run dev:backend\" \"pnpm run dev:frontend\" \"pnpm run dev:electron\"",
    "dev:all": "pnpm run dev",
    "dev:frontend": "vite --config frontend/vite.config.ts",
    "dev:backend": "make -C backend dev",
    "dev:electron": "cross-env NODE_ENV=development wait-on http://localhost:3333 tcp:127.0.0.1:5555 && pnpm run build:electron:main && cross-env NODE_ENV=development electron .",
    "preview": "vite preview --config frontend/vite.config.ts",
    "// === SETUP & INSTALLATION ===": "",
    "install:all": "pnpm install && pnpm run backend:install",
    "postinstall": "bash scripts/setup-hooks.sh || true",
    "hooks:setup": "bash scripts/setup-hooks.sh",
    "// === BUILD & DISTRIBUTION ===": "",
    "build": "concurrently \"pnpm run build:frontend\" \"pnpm run build:electron:main\"",
    "build:all": "concurrently \"pnpm run backend:package\" \"pnpm run build:frontend\" \"pnpm run build:electron:main\"",
    "build:frontend": "vite build --config frontend/vite.config.ts",
    "build:electron": "concurrently \"pnpm run build:frontend\" \"pnpm run build:electron:main\" && electron-builder",
    "build:electron:main": "tsc -p frontend/electron/tsconfig.json",
    "dist:all": "concurrently \"pnpm run backend:package\" \"pnpm run build:frontend\" \"pnpm run build:electron:main\" && electron-builder -mwl",
    "dist:mac": "concurrently \"pnpm run backend:package\" \"pnpm run build:frontend\" \"pnpm run build:electron:main\" && electron-builder --mac --publish never",
    "dist:win": "concurrently \"pnpm run backend:package\" \"pnpm run build:frontend\" \"pnpm run build:electron:main\" && electron-builder --win --publish never",
    "dist:linux": "concurrently \"pnpm run backend:package\" \"pnpm run build:frontend\" \"pnpm run build:electron:main\" && electron-builder --linux --publish never",
    "// === TESTING ===": "",
    "test:unit": "jest -c frontend/jest.config.js --rootDir frontend",
    "test:unit:all": "concurrently \"pnpm run test:unit\" \"pnpm run backend:test:unit\"",
    "test:coverage": "jest -c frontend/jest.config.js --rootDir frontend --coverage --coverageReporters=json --coverageReporters=lcov --coverageReporters=html --coverageReporters=text --reporters=default --reporters=jest-junit",
    "coverage:all": "concurrently \"pnpm run test:coverage\" \"pnpm run backend:coverage\"",
    "coverage:unit:all": "concurrently \"pnpm run test:coverage\" \"pnpm run backend:coverage:unit\"",
    "coverage:integration:all": "pnpm run backend:coverage:integration",
    "// === E2E TESTING ===": "",
    "e2e:install": "cd func_tests && pnpm install",
    "e2e:browsers": "pnpm exec playwright install --config=func_tests/playwright.config.ts",
    "e2e:dev": "USE_EXISTING_SERVER=1 pnpm exec playwright test --config=func_tests/playwright.config.ts",
    "e2e:all": "pnpm exec playwright test --config=func_tests/playwright.config.ts",
    "e2e:all:browser": "pnpm exec playwright test --config=func_tests/playwright.config.ts --project=$PROJECT",
    "e2e:p0": "pnpm exec playwright test func_tests/e2e/00-p0-critical.test.ts --config=func_tests/playwright.config.ts --reporter=line",
    "e2e:smoke": "pnpm exec playwright test func_tests/e2e/01-smoke --config=func_tests/playwright.config.ts",
    "e2e:headed": "pnpm exec playwright test --config=func_tests/playwright.config.ts --headed",
    "e2e:debug": "pnpm exec playwright test --config=func_tests/playwright.config.ts --debug",
    "e2e:chrome": "pnpm exec playwright test --config=func_tests/playwright.config.ts --project=chromium",
    "e2e:report": "pnpm exec playwright show-report func_tests/playwright-report",
    "// === CODE QUALITY ===": "",
    "lint:all": "concurrently \"pnpm run lint:frontend\" \"pnpm run backend:lint\"",
    "lint:frontend": "eslint -c frontend/eslint.config.mjs frontend",
    "format:all": "concurrently \"pnpm run format:frontend\" \"pnpm run backend:format\"",
    "format:frontend": "eslint -c frontend/eslint.config.mjs --fix frontend",
    "typecheck:all": "concurrently \"pnpm run typecheck:frontend\" \"pnpm run backend:typecheck\"",
    "typecheck:frontend": "tsc --noEmit -p frontend/tsconfig.json",
    "// === BACKEND OPERATIONS ===": "",
    "backend:install": "make -C backend install",
    "backend:install-ml": "make -C backend install-ml",
    "backend:verify-models": "make -C backend verify-models",
    "backend:package": "make -C backend package",
    "backend:package-lite": "make -C backend package-lite",
    "backend:test": "make -C backend test",
    "backend:test:unit": "make -C backend test-unit",
    "backend:coverage": "make -C backend coverage",
    "backend:coverage:unit": "make -C backend coverage-unit",
    "backend:lint": "make -C backend lint",
    "backend:typecheck": "make -C backend typecheck",
    "backend:format": "make -C backend format",
    "backend:check-ml": "make -C backend check-ml",
    "// === RELEASE & VERSION MANAGEMENT ===": "",
    "release": "node scripts/create-tag.js",
    "release:push": "git push origin main && git push origin --tags",
    "tag": "node scripts/create-tag.js",
    "tag:patch": "node scripts/create-tag.js patch",
    "tag:minor": "node scripts/create-tag.js minor",
    "tag:major": "node scripts/create-tag.js major",
    "version:update": "node scripts/update-version.js",
    "version:sync": "node scripts/update-version.js && git add -A && git commit -m 'chore: sync versions' || true",
    "// === UTILITIES ===": "",
    "ports:kill": "bash scripts/kill-ports.sh",
    "ports:kill:sudo": "sudo bash scripts/kill-ports.sh"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@playwright/test": "^1.55.1",
    "@tailwindcss/postcss": "^4.1.14",
    "@testing-library/dom": "^10.4.1",
    "@testing-library/jest-dom": "^6.9.1",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/jest": "^30.0.0",
    "@types/node": "^24.6.2",
    "@types/react": "^19.2.0",
    "@types/react-dom": "^19.2.0",
    "@vitejs/plugin-react": "^5.0.4",
    "autoprefixer": "^10.4.21",
    "concurrently": "^9.2.1",
    "cross-env": "^10.1.0",
    "dmg-builder": "26.0.12",
    "electron": "^38.2.1",
    "electron-builder": "^26.0.12",
    "electron-builder-squirrel-windows": "26.0.12",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^6.1.0",
    "eslint-plugin-react-refresh": "^0.4.23",
    "globals": "^16.4.0",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^30.2.0",
    "jest-environment-jsdom": "^30.2.0",
    "jest-junit": "^16.0.0",
    "msw": "^2.11.3",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.14",
    "tailwindcss-animate": "^1.0.7",
    "terser": "^5.44.0",
    "ts-jest": "^29.4.4",
    "typescript": "^5.9.3",
    "typescript-eslint": "^8.45.0",
    "vite": "^7.1.9",
    "wait-on": "^9.0.1"
  },
  "dependencies": {
    "@radix-ui/react-checkbox": "^1.3.3",
    "@radix-ui/react-collapsible": "^1.1.12",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-scroll-area": "^1.2.10",
    "@radix-ui/react-select": "^2.1.19",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.6",
    "@radix-ui/react-tabs": "^1.1.13",
    "@radix-ui/react-toast": "^1.2.15",
    "@radix-ui/react-popover": "^1.1.14",
    "@tanstack/react-virtual": "^3.10.8",
    "axios": "^1.12.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "electron-log": "^5.2.4",
    "electron-updater": "^6.3.9",
    "framer-motion": "^12.23.22",
    "lucide-react": "^0.544.0",
    "react": "^19.2.0",
    "react-dom": "^19.2.0",
    "react-router-dom": "^7.9.3",
    "tailwind-merge": "^3.3.1",
    "zustand": "^5.0.8"
  },
  "build": {
    "appId": "com.idealgoggles.app",
    "productName": "ideal-goggles",
    "copyright": "Copyright Â© 2023 Ideal Goggles Team",
    "directories": {
      "output": "dist-electron",
      "buildResources": "build-resources"
    },
    "icon": "build-resources/icon.png",
    "files": [
      "frontend/dist/**/*",
      "frontend/electron/dist/**/*",
      "!frontend/src/**/*",
      "!backend/**/*",
      "!*.ts",
      "!*.tsx"
    ],
    "extraResources": [
      {
        "from": "backend/dist",
        "to": "backend",
        "filter": [
          "**/*"
        ]
      }
    ],
    "win": {
      "target": [
        {
          "target": "nsis",
          "arch": [
            "x64",
            "ia32"
          ]
        },
        {
          "target": "portable",
          "arch": [
            "x64"
          ]
        }
      ],
      "verifyUpdateCodeSignature": false,
      "signAndEditExecutable": false
    },
    "mac": {
      "target": [
        {
          "target": "dmg",
          "arch": [
            "arm64"
          ]
        }
      ],
      "category": "public.app-category.photography",
      "hardenedRuntime": false,
      "gatekeeperAssess": false,
      "identity": null,
      "entitlements": "build-resources/entitlements.mac.plist",
      "entitlementsInherit": "build-resources/entitlements.mac.plist",
      "singleArchFiles": "**/*"
    },
    "linux": {
      "target": [
        {
          "target": "AppImage",
          "arch": [
            "x64"
          ]
        },
        {
          "target": "deb",
          "arch": [
            "x64"
          ]
        }
      ],
      "category": "Graphics",
      "executableName": "ideal-goggles",
      "artifactName": "${productName}-${version}-${arch}.${ext}"
    },
    "nsis": {
      "oneClick": false,
      "perMachine": false,
      "allowToChangeInstallationDirectory": true,
      "allowElevation": true,
      "createDesktopShortcut": true,
      "createStartMenuShortcut": true,
      "shortcutName": "ideal-goggles",
      "uninstallDisplayName": "ideal-goggles"
    },
    "dmg": {
      "title": "ideal-goggles",
      "iconSize": 100,
      "format": "UDZO",
      "background": null,
      "writeUpdateInfo": false,
      "contents": [
        {
          "x": 110,
          "y": 150
        },
        {
          "x": 240,
          "y": 150,
          "type": "link",
          "path": "/Applications"
        }
      ],
      "internetEnabled": false
    },
    "appImage": {
      "artifactName": "${productName}-${version}-${arch}.${ext}"
    },
    "deb": {
      "packageCategory": "graphics",
      "synopsis": "Ideal Goggles desktop application",
      "description": "Privacy-focused local photo search and organization with AI capabilities.",
      "maintainer": "Ideal Goggles Team"
    },
    "publish": {
      "provider": "github",
      "owner": "ideal-goggles",
      "repo": "ideal-goggles",
      "releaseType": "release"
    }
  },
  "packageManager": "pnpm@10.17.1"
}
