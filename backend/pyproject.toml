[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "photo-search-backend"
version = "1.0.0"
description = "Backend API for photo search and navigation system"
authors = [{name = "Photo Search Team"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.23",
    "alembic>=1.12.1",
    "aiosqlite>=0.19.0",
    "python-multipart>=0.0.6",
    "pillow>=10.1.0",
    "numpy>=1.24.0",
    "faiss-cpu>=1.7.4",
    "onnxruntime>=1.16.3",
    "pytesseract>=0.3.10",
    "python-magic>=0.4.27",
    "watchdog>=3.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "psutil>=5.9.0",
    "cryptography>=41.0.7",
    "keyring>=24.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
    "black>=23.11.0",
    "ruff>=0.1.6",
    "mypy>=1.7.1",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = ["E", "F", "W", "C90", "I", "N", "UP", "YTT", "S", "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10", "DJ", "EM", "EXE", "FA", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SLOT", "SIM", "TID", "TCH", "INT", "ARG", "PTH", "TD", "FIX", "ERA", "PD", "PGH", "PL", "TRY", "FLY", "NPY", "AIR", "PERF", "FURB", "LOG", "RUF"]
ignore = [
    "S101", "S104", "COM812", "ISC001",  # Original ignores
    "E501",  # Line too long - can be handled by formatter
    "G004",  # Logging f-string - not critical
    "PLR2004",  # Magic value comparison - not critical for now
    "PLC0415",  # Import outside top-level - test files
    "BLE001",  # Blind except - will fix gradually
    "TID252",  # Relative imports - existing code pattern
    "DTZ005", "DTZ006", "DTZ007",  # Datetime without timezone - not critical
    "TRY300", "TRY301", "TRY401",  # Try-except patterns - not critical
    "FBT001", "FBT002",  # Boolean type hints - not critical
    "PLW2901", "PLW0603", "PLW0602",  # Loop/global warnings - not critical
    "PTH123", "PTH108", "PTH110", "PTH116", "PTH118", "PTH103", "PTH120",  # Path usage - not critical
    "B904",  # Exception chaining - good practice but not critical
    "ARG001", "ARG002", "ARG004",  # Unused arguments - common in interfaces/mocks
    "F401",  # Unused imports - often used for availability checks
    "S607", "S603",  # Security subprocess warnings - existing patterns
    "E722", "S110",  # Exception handling patterns - existing code
    "TD002", "TD003", "FIX002",  # TODO formatting - documentation issues
    "SLF001",  # Private member access - intentional internal usage
    "C901",  # Complex structure - business logic complexity
    "PLR0913", "PLR0912", "PLR0915", "PLR0911",  # Code complexity - API design
    "B008",  # Function calls in defaults - FastAPI pattern
    "S608",  # Hardcoded SQL - parameterized queries with dynamic structure
    "SIM102",  # Nested if statements - readability preference
    "NPY002",  # Numpy legacy - compatibility
    "S112",  # Try-except-continue - existing pattern
    "RUF012",  # Mutable class default - intentional design
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S105", "S106", "S107",  # test data may include secrets-like strings
    "PLR2004",                  # allow magic values in tests
    "SLF001",                   # private member access in tests
    "PT",                       # allow unittest-style assertions in tests
    "T201",                     # allow prints in performance/diagnostic tests
    "S311",                     # allow non-crypto random usage in tests
    "PERF401",                  # allow simple loops over comprehensions in tests
    "B007",                     # allow unused loop variable naming in tests
    "F841",                     # allow unused local variables in tests
    "SIM117",                   # allow nested with statements in tests
]

[tool.black]
target-version = ["py311"]
line-length = 88

[tool.mypy]
python_version = "3.11"
strict = false
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
ignore_missing_imports = true
check_untyped_defs = false
allow_untyped_calls = true
allow_untyped_defs = true
allow_untyped_globals = true
allow_redefinition = true
implicit_optional = true
warn_no_return = false
warn_unreachable = false
show_error_codes = false
disable_error_code = ["var-annotated", "assignment", "arg-type", "operator", "union-attr", "index", "call-overload", "dict-item", "misc", "valid-type", "attr-defined", "list-item", "return-value", "truthy-function"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --continue-on-collection-errors --tb=short"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "performance: marks tests as performance tests (deselect with '-m \"not performance\"')",
    "contract: contract tests for API endpoints (may fail for unimplemented features)",
    "integration: integration tests that require running services"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]
fail_under = 0
