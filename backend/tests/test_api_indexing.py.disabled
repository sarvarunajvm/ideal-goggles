"""
Unit and integration tests for the indexing API.
"""

import pytest
from fastapi.testclient import TestClient
from unittest.mock import patch, MagicMock, AsyncMock
import asyncio
import sys
import os

sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from main import app


class TestIndexingAPI:
    """Test suite for indexing endpoints."""

    @pytest.fixture
    def client(self):
        """Create test client."""
        return TestClient(app)

    def test_start_indexing_success(self, client):
        """Test starting indexing process successfully."""
        with patch('api.indexing.IndexingManager') as mock_manager:
            mock_instance = MagicMock()
            mock_instance.is_indexing = False
            mock_instance.start_indexing = AsyncMock(return_value={"status": "started"})
            mock_manager.return_value = mock_instance

            response = client.post("/index/start", json={"full": False})
            assert response.status_code == 200
            data = response.json()
            assert data["status"] == "started"
            assert data["message"] == "Indexing started successfully"

    def test_start_indexing_already_running(self, client):
        """Test starting indexing when already running."""
        with patch('api.indexing.IndexingManager') as mock_manager:
            mock_instance = MagicMock()
            mock_instance.is_indexing = True
            mock_manager.return_value = mock_instance

            response = client.post("/index/start", json={"full": False})
            assert response.status_code == 409
            data = response.json()
            assert "already in progress" in data["detail"]

    def test_stop_indexing_success(self, client):
        """Test stopping indexing process."""
        with patch('api.indexing.IndexingManager') as mock_manager:
            mock_instance = MagicMock()
            mock_instance.is_indexing = True
            mock_instance.stop_indexing = AsyncMock(return_value={"status": "stopped"})
            mock_manager.return_value = mock_instance

            response = client.post("/index/stop")
            assert response.status_code == 200
            data = response.json()
            assert data["status"] == "stopped"
            assert data["message"] == "Indexing stopped successfully"

    def test_get_indexing_status(self, client):
        """Test getting indexing status."""
        with patch('api.indexing.IndexingManager') as mock_manager:
            mock_instance = MagicMock()
            mock_instance.get_status = MagicMock(return_value={
                "is_indexing": True,
                "current_folder": "/photos/vacation",
                "processed_files": 150,
                "total_files": 500,
                "progress": 30.0
            })
            mock_manager.return_value = mock_instance

            response = client.get("/index/status")
            assert response.status_code == 200
            data = response.json()
            assert data["is_indexing"] is True
            assert data["processed_files"] == 150
            assert data["total_files"] == 500
            assert data["progress"] == 30.0

    def test_get_indexing_history(self, client):
        """Test getting indexing history."""
        with patch('api.indexing.get_indexing_history') as mock_history:
            mock_history.return_value = [
                {
                    "id": 1,
                    "started_at": "2024-01-01T10:00:00",
                    "completed_at": "2024-01-01T10:30:00",
                    "files_processed": 1000,
                    "status": "completed"
                },
                {
                    "id": 2,
                    "started_at": "2024-01-02T10:00:00",
                    "completed_at": None,
                    "files_processed": 500,
                    "status": "in_progress"
                }
            ]

            response = client.get("/index/history")
            assert response.status_code == 200
            data = response.json()
            assert len(data) == 2
            assert data[0]["files_processed"] == 1000
            assert data[1]["status"] == "in_progress"

    @pytest.mark.parametrize("full_reindex", [True, False])
    def test_indexing_with_parameters(self, full_reindex, client):
        """Test indexing with different parameters."""
        with patch('api.indexing.IndexingManager') as mock_manager:
            mock_instance = MagicMock()
            mock_instance.is_indexing = False
            mock_instance.start_indexing = AsyncMock()
            mock_manager.return_value = mock_instance

            response = client.post("/index/start", json={"full": full_reindex})
            assert response.status_code == 200

            # Verify the correct parameter was passed
            mock_instance.start_indexing.assert_called_once()
            call_args = mock_instance.start_indexing.call_args
            assert call_args[1]["full"] == full_reindex